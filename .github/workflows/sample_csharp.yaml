name: "CodeQL and Docker"

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./application/sample_csharp

jobs:
  # analyze:
  #   name: Analyze CodeQL
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: ["csharp"]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         languages: ${{ matrix.language }}

  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v2

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2
  #       with:
  #         category: "/language:${{matrix.language}}"

  #     - name: Save CodeQL results
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: codeql-results
  #         path: ./codeql-results

  containerize:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    # needs: analyze

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ vars.APP_IMAGE }}:$GITHUB_SHA

      - name: Log in to Docker Hub or your container registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Push the Docker image
        run: docker push ${{ vars.APP_IMAGE }}:$GITHUB_SHA

  deploy-to-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest

    needs: containerize

    defaults:
      run:
        working-directory: ./manifest/dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set container image in Deployment YAML
        run: |
          sed -i "s|image: application_image|image: ${{ vars.APP_IMAGE }}:$GITHUB_SHA|g" deployment.yaml

      - name: Set up kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig

      - name: Use kubeconfig
        run: |
          mkdir -p $HOME/.kube
          mv kubeconfig $HOME/.kube/config

      - name: Debug kubeconfig
        run: cat $HOME/.kube/config

      - name: Set KUBE_CONTEXT
        run: echo "KUBE_CONTEXT=${{ secrets.KUBE_CONTEXT }}" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          kubectl config use-context "${{ secrets.KUBE_CONTEXT }}"
          kubectl apply -f .
